-- {-# LANGUAGE DataKinds, KindSignatures #-}

signature Numeric.Tensile.Quantization.Types where

import Data.Tensor.Types (T(..), Elt(..))
import qualified Prelude as P

round
  :: forall d e i. Elt e
  => Elt i
  => P.RealFrac e
  => P.Integral i 
  => T d e
  -> T d i

{-
truncate
  :: forall d e i. Elt e
  => Elt i
  => P.RealFrac e
  => P.Integral i 
  => T d e
  -> T d i

ceiling
  :: forall d e i. Elt e
  => Elt i
  => P.RealFrac e
  => P.Integral i 
  => T d e
  -> T d i

floor
  :: forall d e i. Elt e
  => Elt i
  => P.RealFrac e
  => P.Integral i 
  => T d e
  -> T d i
-}
