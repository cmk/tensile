{-# LANGUAGE DataKinds, KindSignatures #-}

signature Numeric.Tensile.Tensor.Types where

import Data.Singletons.Prelude.List (Product)
import Data.Vector (Vector)
import GHC.TypeLits
--import GHC.Exts (Constraint)
import Numeric.Dimensions --(KnownDim(..))


-- | Implementation-dependant constraint on the tensor elements.
--type family Elt e :: Constraint
class Elt e

data T (d :: [Nat]) e

--fromVector :: forall e n . KnownDim n => KnownNat n => Vector e -> Maybe (T '[n] e)

constant
  :: forall d e. Elt e
  => Dimensions d
  => KnownDim (Product d)
  => Vector e
  -> Maybe (T d e)

{-
https://github.com/hasktorch/hasktorch/blob/master/signatures/types/src/Torch/Sig/Types.hsig#L55
data HsReal
instance Num  HsReal
instance Show HsReal
instance Ord HsReal
instance NFData HsReal
instance PrintfArg HsReal


instance Eq e => Eq (T s e)
instance Num e => Num (T s e)
instance Floating e => Floating (T s e)
instance Fractional e => Fractional (T s e)
instance RealFrac e => RealFrac (T s e)
-}
