{-# LANGUAGE DataKinds, KindSignatures, UndecidableInstances #-}

signature Numeric.Tensile.Tensor.Types where

import Data.Singletons.Prelude.List (Product)
import Data.Vector (Vector)
import GHC.TypeLits
--import GHC.Exts (Constraint)
import Numeric.Dimensions --(KnownDim(..))


-- | Implementation-dependant constraint on the tensor elements.
class Elt e

data T (d :: [Nat]) e

instance (Elt e, Eq e) => Eq (T d e)
instance (Elt e, Num e, KnownDim (Product d)) => Num (T d e)

constant
  :: forall d e. Elt e
  => Dimensions d
  => KnownDim (Product d)
  => Vector e
  -> Maybe (T d e)

{-
vector :: TensorType a => [a] -> Tensor Build a 
zeros :: forall a. (Num a, TensorType a) => Shape -> Tensor Build a


instance Floating e => Floating (T s e)
instance Fractional e => Fractional (T s e)
instance RealFrac e => RealFrac (T s e)
-}
