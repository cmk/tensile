{-# LANGUAGE DataKinds, KindSignatures, UndecidableInstances #-}

signature Data.Tensor.Types where

-- this signature roughly corresponds to tf.bitwise and tf.math in the TensorFlow Python API

import Data.Bits 
import Data.Singletons.Prelude.List (Product)
import Data.Vector.Storable (Vector)
import GHC.TypeLits
--import GHC.Exts (Constraint)
import Numeric.Dimensions --(KnownDim(..))

class Elt e
-- instance Elt TVal
-- instance Elt IVal
-- instance Elt BVal
-- 

-- | A tensor value.
data TVal :: *
-- instance Eq TVal
-- instance Num TVal
-- instance Floating TVal
-- instance Fractional TVal
-- 

-- | An index value.
data IVal :: *
-- instance Eq IVal
-- instance Num IVal
-- instance Ord IVal
-- instance Bits IVal
-- 

-- | A BValean value.
data BVal :: *

-- | By convention, elements are assumed to be stored in major-to-minor (i.e. row-major) order.
-- Implementations that use a different ordering (e.g. Eigen), must supply a conversion or risk
-- unexpected behavior upon swapping implementations. 
data Tensor e (d :: [Nat])

-- | A real or complex-valued tensor of shape 'd'. 
type T d = Tensor TVal d

-- | An integer or non-negative integer-valued tensor of shape 'd'. 
type I d = Tensor IVal d

-- | A boolean-valued tensor of shape 'd'. 
type B d = Tensor BVal d

-- | A variable tensor. Need ST-like interface w/ ghost type for variables.
--newtype V v (d :: [Nat]) 

instance (KnownDim (Product d), Elt e, Eq e) => Eq (Tensor e d)
--instance (KnownDim (Product d), Elt e, Eq e, Bits e, Num e) => Bits (Tensor e d) 
instance (KnownDim (Product d), Elt e, Num e) => Num (Tensor e d) 
instance (KnownDim (Product d), Elt e, Fractional e) => Fractional (Tensor e d) 
instance (KnownDim (Product d), Elt e, Floating e) => Floating (Tensor e d)
-- instance (Elt e, Integral e) => Integral (Tensor e d) 
-- instance (KnownDim (Product d), Elt e, RealFrac e) => RealFrac (Tensor e d)  





{-

isNaN
isInf
logicalAnd
logicalNot
logicalOr

https://github.com/hasktorch/hasktorch/blob/89988da2d00475e6215308351c8163629fc7d0e0/indef/src/Torch/Indef/Dynamic/Tensor/Math/Pointwise/Floating.hs#L250-L303

round 
  :: forall d e. Elt e
  => Elt i
  => Real e
  => Fractional e
  => Integral i 
  => T d d
  -> T d i

truncate :: Integral b => a -> b

round :: Integral b => a -> b
ceil :: Integral b => a -> b
floor :: Integral b => a -> b

-}


{-

-- 
-- sigmoid
constant
  :: forall d e. Elt e
  => KnownDim (Product d)
  => Vector e
  -> Maybe (Tensor e d)

equal
  :: Elt e
  => Eq e
  => Tensor e d
  -> Tensor e d
  -> Tensor BVal d

notEqual
  :: Elt e
  => Eq e
  => Tensor e d
  -> Tensor e d
  -> Tensor BVal d

less
  :: Elt e
  => Ord e
  => Tensor e d
  -> Tensor e d
  -> Tensor BVal d

lessEqual
  :: Elt e
  => Ord e
  => Tensor e d
  -> Tensor e d
  -> Tensor BVal d

greater
  :: Elt e
  => Ord e
  => Tensor e d
  -> Tensor e d
  -> Tensor BVal d

greaterEqual
  :: Elt e
  => Ord e
  => Tensor e d
  -> Tensor e d
  -> Tensor BVal d
-}

maximum
  :: Elt e
  => Ord e
  => Tensor e d
  -> Tensor e d
  -> Tensor e d

minimum
  :: Elt e
  => Ord e
  => Tensor e d
  -> Tensor e d
  -> Tensor e d

{-
vector :: TensorType a => [a] -> Tensor Build a 
zeros :: forall a. (Num a, TensorType a) => Shape -> Tensor Build a


instance Floating e => Floating (T s e)
instance Fractional e => Fractional (T s e)
instance RealFrac e => RealFrac (T s e)
-}
