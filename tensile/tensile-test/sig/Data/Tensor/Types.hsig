{-# LANGUAGE DataKinds, KindSignatures, UndecidableInstances #-}

signature Data.Tensor.Types where

-- this signature roughly corresponds to tf.bitwise and tf.math in the TensorFlow Python API

import Data.Bits 
import Data.Singletons.Prelude.List (Product)
import Data.Vector (Vector)
import GHC.TypeLits
--import GHC.Exts (Constraint)
import Numeric.Dimensions --(KnownDim(..))


-- | Implementation-dependant constraint on the tensor elements.
class Elt e

data T (d :: [Nat]) e

-- may want to use a default instance from the equals op
-- instance (Elt e, Eq e) => Eq (T d e)
instance (KnownDim (Product d), Elt e, Eq e, Bits e, Num e) => Bits (T d e) 
instance (KnownDim (Product d), Elt e, Num e) => Num (T d e) 
instance (KnownDim (Product d), Elt e, Fractional e) => Fractional (T d e) 
instance (KnownDim (Product d), Elt e, Floating e) => Floating (T d e)
-- instance (Elt e, Integral e) => Integral (T d e) 

-- instance (KnownDim (Product d), Elt e, RealFrac e) => RealFrac (T d e)  

-- 
-- sigmoid
constant
  :: forall d e. Elt e
  => KnownDim (Product d)
  => Vector e
  -> Maybe (T d e)

{-
isNaN
isInf
logicalAnd
logicalNot
logicalOr

https://github.com/hasktorch/hasktorch/blob/89988da2d00475e6215308351c8163629fc7d0e0/indef/src/Torch/Indef/Dynamic/Tensor/Math/Pointwise/Floating.hs#L250-L303

round 
  :: forall d e. Elt e
  => Elt i
  => Real e
  => Fractional e
  => Integral i 
  => T d e
  -> T d i

truncate :: Integral b => a -> b

round :: Integral b => a -> b
ceil :: Integral b => a -> b
floor :: Integral b => a -> b

class (RealFrac a, Floating a) => RealFloat a where
  floatRadix :: a -> Integer
  floatDigits :: a -> Int
  floatRange :: a -> (Int, Int)
  decodeFloat :: a -> (Integer, Int)
  encodeFloat :: Integer -> Int -> a
  exponent :: a -> Int
  significand :: a -> a
  scaleFloat :: Int -> a -> a
  isNaN :: a -> Bool
  isInfinite :: a -> Bool
  isDenormalized :: a -> Bool
  isNegativeZero :: a -> Bool
  isIEEE :: a -> Bool
  atan2 :: a -> a -> a
-}


equal
  :: forall d e. Elt e
  => Eq e
  => T d e
  -> T d e
  -> T d Bool

notEqual
  :: forall d e. Elt e
  => Eq e
  => T d e
  -> T d e
  -> T d Bool

less
  :: forall d e. Elt e
  => Ord e
  => T d e
  -> T d e
  -> T d Bool

lessEqual
  :: forall d e. Elt e
  => Ord e
  => T d e
  -> T d e
  -> T d Bool

greater
  :: forall d e. Elt e
  => Ord e
  => T d e
  -> T d e
  -> T d Bool

greaterEqual
  :: forall d e. Elt e
  => Ord e
  => T d e
  -> T d e
  -> T d Bool

maximum
  :: forall d e. Elt e
  => Ord e
  => T d e
  -> T d e
  -> T d e

minimum
  :: forall d e. Elt e
  => Ord e
  => T d e
  -> T d e
  -> T d e

{-
vector :: TensorType a => [a] -> Tensor Build a 
zeros :: forall a. (Num a, TensorType a) => Shape -> Tensor Build a


instance Floating e => Floating (T s e)
instance Fractional e => Fractional (T s e)
instance RealFrac e => RealFrac (T s e)
-}
